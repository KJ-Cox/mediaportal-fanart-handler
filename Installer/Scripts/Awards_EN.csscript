//css_reference System.Core;

//css_reference "core.dll";
//css_reference "utils.dll";

//css_reference "plugins\process\FanartHandler.dll";

//css_reference "Newtonsoft.Json.dll";

using FanartHandler;

using MediaPortal.Util;

using System;
using System.Collections;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Web;

using Newtonsoft.Json;

internal class AwardsGrabber : Grabbers.Movies.IAwardsGrabber
{
  const string strGrabber = "FH:IMDB";
  const string strGrabberVersion = "20230430.I";

  string Grabbers.Movies.IAwardsGrabber.GetName()
  {
    return "IMDB Grabber v" + strGrabberVersion; 
  }

  string Grabbers.Movies.IAwardsGrabber.GetMovieAwards(string imdbid, string tmdbid, string localid)
  {
    if (string.IsNullOrEmpty(imdbid))
    {
      return string.Empty;
    }

    GrabbersLog.Info("{0} Version: {1}", strGrabber, strGrabberVersion);
    GrabbersLog.Debug("{0} Get awards start: IMDBId {1}", strGrabber, imdbid);

    string awards = string.Empty;
    try
    {
      awards = GetAwardsIMDB(imdbid);
    }
    catch (Exception ex)
    {
      GrabbersLog.Error("{0} Exception for lookup of {1} err:{2} stack:{3}", strGrabber, imdbid, ex.Message, ex.StackTrace);
      awards = string.Empty;
    }

    GrabbersLog.Debug("{0} Search ended. IMDBId {1}: found: {2}", strGrabber, imdbid, !string.IsNullOrEmpty(awards));
    return awards;
  }

  #region IMDB Parameters

  private const string IMDB_BaseUrl = "https://www.imdb.com/title/{0}/";

  #endregion IMDB Parameters

  #region IMDB Const

  public const string IMDB_Awards = IMDB_BaseUrl + "awards";

  #endregion IMDB Const

  #region IMDB Methods

  private static string GetAwardsIMDB(string IMDBID)
  {
    // Awards MP1-4846
    try
    {
      string _awardsURL = string.Format(IMDB_Awards, IMDBID);
      string _awardsPage = GetWebServerResponse(_awardsURL);
      if (string.IsNullOrEmpty(_awardsPage))
      {
        return string.Empty;
      }

      string regex = @"type=.application\/json.>(?<json>{.+?})<";
      string json = Regex.Match(_awardsPage, regex, RegexOptions.Singleline | RegexOptions.IgnoreCase).Groups["json"].Value;
      if (string.IsNullOrEmpty(json))
      {
        Log.Debug("{0} GetIMDBAwards IMDB = {1}, JSON not found.", strGrabber, IMDBID);
      }

      try
      {
        JsonIMDBAwards Awards = JsonConvert.DeserializeObject<JsonIMDBAwards>(json);
        if (Awards == null)
        {
          Log.Debug("{0} GetIMDBAwards IMDB = {1}, JSON changed!?.", strGrabber, IMDBID);
        }

        if (Awards.props != null && Awards.props.pageProps != null &&
          (Awards.props.pageProps.contentData == null || Awards.props.pageProps.contentData.nominationsCount == 0))
        {
          Log.Debug("{0} GetIMDBAwards No Awards for IMDB = {1}", strGrabber, IMDBID);
        }

        string _awardsList = string.Empty;
        if (!string.IsNullOrEmpty(Awards.props.pageProps.contentData.entityMetadata.id))
        {
          string AwardsMASK = string.Empty;
          if (Awards.props.pageProps.contentData.winsCount > 0 && Awards.props.pageProps.contentData.nominationsCount > 0)
          {
            AwardsMASK = "{0} WINS & {1} NOMINATIONS";
          }
          else if (Awards.props.pageProps.contentData.winsCount > 0)
          {
            AwardsMASK = "{0} WINS";
          }
          else if (Awards.props.pageProps.contentData.nominationsCount > 0)
          {
            AwardsMASK = "{1} NOMINATIONS";
          }
          string awardMainTitle = string.Format(AwardsMASK, Awards.props.pageProps.contentData.winsCount,
                                                            Awards.props.pageProps.contentData.nominationsCount);
          if (!string.IsNullOrEmpty(awardMainTitle))
          {
            _awardsList = "::: " + awardMainTitle + " :::\n\n";
          }

          foreach (var category in Awards.props.pageProps.contentData.categories)
          {
            var awards = category.section.items.Where(x => x.rowTitle.Contains("Winner"));
            string awardMainName = string.Empty;
            if (awards.Count() > 0)
            {
              awardMainName = category.name;

              _awardsList += "* " + awardMainName + "\n";
              _awardsList += "Won:\n";

              foreach (var award in awards)
              {
                string awardLineName = Regex.Match(award.rowTitle, @"(?<year>\d{4})").Groups["year"].Value + " " + award.rowSubTitle;
                string awardLineWho = string.Join(", ", award.subListContent.Select(x => x.text).ToList());
                string awardLineWhat = string.Join(", ", award.listContent.Select(x => x.text).ToList());

                _awardsList += "- " + awardLineName + (string.IsNullOrEmpty(awardLineWho) ? string.Empty : " - " + awardLineWho) + (string.IsNullOrEmpty(awardLineWhat) ? string.Empty : " - " + awardLineWhat) + "\n";
                Log.Debug("{4} Award (W): {0} - {1} {2} {3}", awardMainName, awardLineName, awardLineWho, awardLineWhat, strGrabber);
              }
            }

            awards = category.section.items.Where(x => x.rowTitle.Contains("Nominee"));
            if (awards.Count() > 0)
            {
              if (string.IsNullOrEmpty(awardMainName))
              {
                awardMainName = category.name;
                _awardsList += "* " + awardMainName + "\n";
              }
              _awardsList += "Nominated:\n";

              foreach (var award in awards)
              {
                string awardLineName = Regex.Match(award.rowTitle, @"(?<year>\d{4})").Groups["year"].Value + " " + award.rowSubTitle;
                string awardLineWho = string.Join(", ", award.subListContent.Select(x => x.text).ToList());
                string awardLineWhat = string.Join(", ", award.listContent.Select(x => x.text).ToList());

                _awardsList += "- " + awardLineName + (string.IsNullOrEmpty(awardLineWho) ? string.Empty : " - " + awardLineWho) + (string.IsNullOrEmpty(awardLineWhat) ? string.Empty : " - " + awardLineWhat) + "\n";
                Log.Debug("{4} Award (N): {0} - {1} {2} {3}", awardMainName, awardLineName, awardLineWho, awardLineWhat, strGrabber);
              }
            }
            if (!string.IsNullOrEmpty(awardMainName))
            {
              _awardsList += "\n";
            }
          }
        }

        if (!string.IsNullOrEmpty(_awardsList))
        {
          return "Awards:\n" + _awardsList; // MP1-4846
        }
      }
      catch (Exception ex)
      {
        Log.Debug("{0} GetIMDBAwards IMDB = {1}, Exception {2}, JSON changed!?.", strGrabber, IMDBID, ex.Message);
      }

    }
    catch (Exception ex)
    {
      Log.Error("{0} GetIMDBAwards error: {1}", strGrabber, ex.Message);
    }
    return string.Empty;
  }

  #endregion IMDB Methods

  #region IMDB JSON Struct

  // IMDB Base
  public class JsonIMDBBase
  {
    [JsonProperty("@type")]
    public string type { get; set; }
  }

  public class JsonIMDBText
  {
    public string text { get; set; }
  }

  public class JsonIMDBPlainText
  {
    public string plainText { get; set; }
  }

  public class JsonIMDBReleaseYear
  {
    public int year { get; set; }
  }

  public class JsonIMDBPlot
  {
    public JsonIMDBPlainText plotText { get; set; }
  }

  public class JsonIMDBPrimaryImage
  {
    public string url { get; set; }
    public int height { get; set; }
    public int width { get; set; }
    public JsonIMDBPlainText caption { get; set; }
  }
  public class JsonIMDBPosterData
  {
    public string constId { get; set; }
    public JsonIMDBPosterImage image { get; set; }
    public string type { get; set; }
  }

  public class JsonIMDBPosterImage
  {
    public string url { get; set; }
    public int maxHeight { get; set; }
    public int maxWidth { get; set; }
    public string caption { get; set; }
  }

  // Movie
  public class JsonIMDBPerson : JsonIMDBBase
  {
    public string url { get; set; }
    public string name { get; set; }
  }

  public class JsonIMDBActor : JsonIMDBPerson
  {
    public string image { get; set; }
    public string description { get; set; }
    public string birthDate { get; set; }
    public string deathDate { get; set; }
  }

  public class JsonIMDBAggregateRating : JsonIMDBBase
  {
    public int ratingCount { get; set; }
    public int bestRating { get; set; }
    public int worstRating { get; set; }
    public double ratingValue { get; set; }
  }

  public class JsonIMDBMovie : JsonIMDBBase
  {
    [JsonProperty("@context")]
    public string context { get; set; }

    public string url { get; set; }
    public string name { get; set; }
    public string alternateName { get; set; }
    public string image { get; set; }
    public string description { get; set; }
    public JsonIMDBAggregateRating aggregateRating { get; set; }
    public string contentRating { get; set; }
    public List<string> genre { get; set; }
    public string datePublished { get; set; }
    public string keywords { get; set; }
    public List<JsonIMDBPerson> actor { get; set; }
    public List<JsonIMDBPerson> director { get; set; }
    public List<JsonIMDBPerson> creator { get; set; }
    public string duration { get; set; }
  }

  // Technical Information
  public class JsonIMDBTech
  {
    public JsonIMDBProps props { get; set; }
  }

  public class JsonIMDBProps
  {
    public JsonIMDBPageProps pageProps { get; set; }
  }

  public class JsonIMDBPageProps
  {
    public JsonIMDBContentData contentData { get; set; }
  }

  public class JsonIMDBContentData
  {
    public string parentDisplayText { get; set; }
    public JsonIMDBEntityMetadata entityMetadata { get; set; }
    public JsonIMDBSection section { get; set; }
  }

  public class JsonIMDBEntityMetadata
  {
    public string id { get; set; }
    public JsonIMDBText titleText { get; set; }
    public JsonIMDBText originalTitleText { get; set; }
    public JsonIMDBReleaseYear releaseYear { get; set; }
    public JsonIMDBPlot plot { get; set; }
    public JsonIMDBPrimaryImage primaryImage { get; set; }
  }

  public class JsonIMDBSection
  {
    public List<JsonIMDBItem> items { get; set; }
  }

  public class JsonIMDBItem
  {
    public string id { get; set; }
    public string rowTitle { get; set; }
    public List<JsonIMDBListContent> listContent { get; set; }
  }

  public class JsonIMDBListContent
  {
    public int id { get; set; }
    public string text { get; set; }
    public string subText { get; set; }
    public string href { get; set; }
  }

  // IMDB Awards
  public class JsonIMDBAwards
  {
    public JsonIMDBAwardsProps props { get; set; }
    public string page { get; set; }
  }

  public class JsonIMDBAwardsProps
  {
    public JsonIMDBAwardsPageProps pageProps { get; set; }
  }

  public class JsonIMDBAwardsPageProps
  {
    public JsonIMDBAwardsContentData contentData { get; set; }
  }

  public class JsonIMDBAwardsContentData
  {
    public string parentDisplayText { get; set; }
    public JsonIMDBEntityMetadata entityMetadata { get; set; }
    public JsonIMDBPosterData posterData { get; set; }
    public List<JsonIMDBAwardsCategory> categories { get; set; }
    public int nominationsCount { get; set; }
    public int winsCount { get; set; }
  }

  public class JsonIMDBAwardsCategory
  {
    public string id { get; set; }
    public string name { get; set; }
    public JsonIMDBAwardsSection section { get; set; }
  }

  public class JsonIMDBAwardsSection
  {
    public int listItemType { get; set; }
    public List<JsonIMDBAwardsSectionItem> items { get; set; }
    public int total { get; set; }
    public string endCursor { get; set; }
  }

  public class JsonIMDBAwardsSectionItem
  {
    public string id { get; set; }
    public List<JsonIMDBAwardsListContent> listContent { get; set; }
    public string rowTitle { get; set; }
    public string rowSubTitle { get; set; }
    public string rowLink { get; set; }
    public List<JsonIMDBAwardsSubListContent> subListContent { get; set; }
  }

  public class JsonIMDBAwardsListContent
  {
    public string className { get; set; }
    public string text { get; set; }
  }

  public class JsonIMDBAwardsSubListContent
  {
    public string text { get; set; }
    public string subText { get; set; }
    public string href { get; set; }
  }

  #endregion IMDB JSON Struct

  #region Web

  private static string GetWebServerResponse(string srequest)
  {
    GrabbersLog.Debug("{0} GetWebServerResponse: {1}", strGrabber, srequest);
    string sReturn = string.Empty;
    System.Net.HttpWebRequest oHttpWebRequest;
    try
    {
      oHttpWebRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(srequest);
      oHttpWebRequest.Timeout = 5000;
      oHttpWebRequest.Method = System.Net.WebRequestMethods.Http.Get;
      string uu = "BCYmcFe4PTBQ8nEoIcCgT5AJwPk7BAOCg5XsQrvqKyvxEUpEB6KqjE0Uv_pqnPChVCCnD8vgTK3UtK7FGCdw39E2j-Fb5MWegRLgbNA2rFWeYUJbbXhRyUaxqGuuW3AZb1grBhmGMxhDJyH5ntFDj1X1Ejh_jqR6BaQUk6P16AN1EMPstTSBIqxVW08QEqMKQgsK75y8_s1Ss9tyDfZpLZzCWhO5qftGUn3_bbw_DBF6sTZDo6xK-zy88VZ8cws-D30P";
      string id = "BCYobsJMWRwG55i2yGvVuZe7v5twryi7KSxLglDHw2wVcI1rMq0OjHVT7duPo5NNHKDDVFBTVjJM4PoMonlTB_q9NvMCs-wB78Y1hGjdgCLX0SEEC2Y6BD4E3Z6cIoMwlhTDFSprYlxMqjEsFGYwWzVp1oIUYkZQ0kgpX_MvBrEh-fU";
      string cookieHeader = string.Format("uu={0}; id={1}", uu, id);
      oHttpWebRequest.Headers.Add("Cookie", cookieHeader);
      oHttpWebRequest.Headers.Add("Accept-Language", "en-US,en;q=0.5");
      System.Net.HttpWebResponse oResponse = (System.Net.HttpWebResponse)oHttpWebRequest.GetResponse();

      using (System.IO.StreamReader sr = new System.IO.StreamReader(oResponse.GetResponseStream()))
      {
        sReturn = sr.ReadToEnd();
      }
      oResponse.Close();
    }
    catch { }
    finally
    {
      oHttpWebRequest = null;
    }
    return sReturn;
  }

  #endregion Web
}
